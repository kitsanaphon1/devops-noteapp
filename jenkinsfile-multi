pipeline {
  agent any

  environment {
    TERRAFORM_HOST = "10.1.0.5"
    TERRAFORM_USER = "sooya"
    TF_REPO        = "https://github.com/kitsanaphon1/devops-noteapp.git"
    TF_DIR         = "/home/sooya/terraform-vm5/devops-noteapp"
    TF_MODE        = "destroy"  // ‡∏´‡∏£‡∏∑‡∏≠ "destroy"
  }

  stages {

    stage('üì• Git Clone on Terraform VM') {
      steps {
        sshagent(credentials: ['ssh-terraform-agent']) {
          sh """
            ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
              if [ ! -d ${TF_DIR} ]; then
                git clone ${TF_REPO} ${TF_DIR};
              else
                cd ${TF_DIR} && git pull;
              fi
            '
          """
        }
      }
    }

    stage('üõ† Ensure jq Installed') {
      steps {
        sshagent(credentials: ['ssh-terraform-agent']) {
          sh """
            ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
              if ! command -v jq >/dev/null 2>&1; then
                echo "üîπ jq not found. Installing..."
                sudo apt-get update &&
                sudo apt-get install -y jq
              else
                echo "‚úÖ jq already installed. Skipping installation."
              fi
            '
          """
        }
      }
    }

    stage('üíª Terraform Apply or Destroy') {
      steps {
        withCredentials([
          string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
          string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
          string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
          string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID')
        ]) {
          sshagent(credentials: ['ssh-terraform-agent']) {
            sh """
              ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
                export ARM_CLIENT_ID="${ARM_CLIENT_ID}" &&
                export ARM_CLIENT_SECRET="${ARM_CLIENT_SECRET}" &&
                export ARM_SUBSCRIPTION_ID="${ARM_SUBSCRIPTION_ID}" &&
                export ARM_TENANT_ID="${ARM_TENANT_ID}" &&

                cd ${TF_DIR}/terraform-multivm &&

                terraform init -no-color &&
                terraform ${TF_MODE} -var-file=terraform.tfvars -auto-approve -no-color
              '
            """
          }
        }
      }
    }

    stage('üåê Get All VM Public IPs') {
      when {
        expression { return env.TF_MODE == 'apply' }
      }
      steps {
        sshagent(credentials: ['ssh-terraform-agent']) {
          script {
            // ‡∏î‡∏∂‡∏á IP ‡∏•‡πâ‡∏ß‡∏ô ‡πÜ
            def ipsRaw = sh(
              script: """
                ssh -o StrictHostKeyChecking=no ${TERRAFORM_USER}@${TERRAFORM_HOST} '
                  cd ${TF_DIR}/terraform-multivm &&
                  terraform output -json public_ips |
                  jq -r ".[]"
                '
              """,
              returnStdout: true
            ).trim()

            // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô array
            def ips = ipsRaw.split("\\r?\\n")

            // Format ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡∏∞ VM name + IP
            def formatted = ""
            for (int i = 0; i < ips.size(); i++) {
              formatted += "sooya-vm-${i} ${ips[i]}\n"
            }

            echo "üìò Public IPs with VM names:\n${formatted}"

            // Save txt file
            writeFile file: 'vm_ips.txt', text: formatted

            archiveArtifacts artifacts: 'vm_ips.txt', fingerprint: true
          }
        }
      }
    }
  }
}
